<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P4 Writeup</title>
  <style>
    /* BEGIN CHANGES HERE */

    /* In this section, you may add CSS styling if desired */
    header {
      text-align: center;
    }

    /* END CHANGES HERE */
  </style>

<body>
  <header>
    <h1>CS 1653 Project P4 Writeup</h1>
    <h2>
      <!-- BEGIN CHANGES HERE -->
      <h3>
        Taha Ahmad - taa95@pitt.edu
        <br>
        Katelyn Kunzmann - kak383@pitt.edu
        <br>
        Luke Milavec - lrm88@pitt.edu
      </h3>
      <!-- END CHANGES HERE -->
    </h2>
  </header>
  <section id="overview">
    <h2>Overview</h2>
    <!-- BEGIN CHANGES HERE -->

    <p>In this section, broadly overview the types of cryptographic techniques that
      your group has decided to use to address threats T5–T7.</p>

    <p>Remove these instructions from your final submission.</p>

    <p>
      Our approach for threat 5 is largely covered from our phase 3 implementation. With a combination of
      shared session keys that expire after each session, message sequencing, and HMAC verification, we can
      adequately detect and prevent reorder, replay, and modification attacks from occuring. The only
      mechanism we did not implement in phase 3 is message sequencing, which is now included in our phase 4 plan.
    </p>
    <p>
      The mechanisms we will implement for threat 6: File Leakage include
    </p>

    <!-- END CHANGES HERE -->
  </section>
  <section id="threat5">
    <h2>Threat T5: Message Reorder, Replay, or Modification</h2>
    <!-- BEGIN CHANGES HERE -->

    <p>
      This threat involves an attacker utilizing the network traffic to their advantage. If an attacker eavesdrops
      on the communication, they can save the messages they believe could be most useful for them. Upon having
      acquired the messages, the attacker can now either reorder or modify the messages in whatever way they
      deem fit for their purpose. They could also simply act as the sender by sending the messages to the
      intended recepient, conducting a replay attack. This attack could lead to greater attacks down the line,
      since the attacker can acquire trust by having certain communications within their fingertips.
      After acquiring trust from servers, admins, or other users, the attacker can now have unauthorized access
      to files.
    </p>
    <p>
      Currently, our implementation has protection against <b>replay attacks</b> because of the use of Elliptic Curve
      Diffie Helman key agreement and, subsequent, shared secret that is derived from K<sub>e</sub> and K<sub>i</sub>.
      This shared secret ensures unique communication per session as it is thrown out after each session and then
      regenerated before the next session. If an attacker attempts to replay messages from an earlier communication
      that they recorded, they will be unsuccessful in further communication since that shared secret
      K<sub>ab</sub> does not exist anymore.
      Therefore, the message will never be verified and read and the client/server connection is terminated.
    </p>
    <p>
      <b>Message reordering</b> is not being handled in our phase 3 implementation. We plan to implement sequencing
      into our phase 4 implementation. Our handshake expects messages (such as keys, usernames, etc.)
      in certain orderly fashion and, therefore, the handshake will fail upon any reordering. Following the
      handshake, both client and server will maintain a sequence of the messaging, incremented by 1.
      The sequence number is appended to the HMAC before each generation. Verifying the HMAC will now include
      verifying the sequence number as well. If verification fails, we will default to assuming there was
      a reorder and/or replay attack. This will work since input.read() and output.write() are blocking.
      In short, sequences of messages will not line up if an attacker attempts a replay and/or reorder attack.
      Client/server connection will be terminated.
    </p>
    <p>
      <b>Message modification</b> is handled in our current implementation, since any modification will result in
      unsuccessful verification as a result of the HMAC verification failure.
    </p>

    <!-- END CHANGES HERE -->
  </section>
  <section id="threat6">
    <h2>Threat T6: File Leakage</h2>
    <!-- BEGIN CHANGES HERE -->

    <p>Repeat the steps as for Threat T5. Remove these instructions from your final submission.</p>

    <!-- END CHANGES HERE -->
  </section>
  <section id="threat7">
    <h2>Threat T7: Token Theft</h2>
    <!-- BEGIN CHANGES HERE -->

    <p>Repeat the steps as for Threat T5. Remove these instructions from your final submission.</p>

    <!-- END CHANGES HERE -->
  </section>
  <section id="discussion">
    <h2>Discussion</h2>
    <!-- BEGIN CHANGES HERE -->

    <p>Conclude with a paragraph or two discussing the interplay between your
      proposed mechanisms, and commenting on the design process that your group
      followed. Did you discuss other ideas that didn’t pan out before settling on the
      above-documented approach? Did you end up designing a really interesting
      protocol suite that addresses multiple threats at once? Use this space to show
      off your hard work!</p>

    <p>Finally, spend about one paragraph arguing that your modified protocols still
      address the threats T1–T4 described in Phase 3 of the project.</p>

    <p>If your group did any extra credit, please discuss that in this section, as
      well.</p>

    <p>Remove these instructions from your final submission.</p>


    <!-- END CHANGES HERE -->
  </section>
</body>

</html>